{
  "scenes": [{
      "preface": "Let's get some output.",
      "code": "print 'Hi there'",
      "prompt": "Hi there"
    },
    {
      "preface": "Let's look at variables. A variable is a label to which we can assign a value.",
      "code": "pi_number = 3.14\nphrase = 'Pi is approximately equal to '\n\nprint phrase + pi_number",
      "prompt": "Pi is approximately equal to 3.14"
    },
    {
      "preface": "In addition to single numbers and sentences, we might want to assign a list to a variable.",
      "code": "my_list = ['apples', 'oranges', 'bananas']\nsome_lucky_numbers = [6, 4, 9]",
			"prompt": ""
    },
    {
      "preface": "Let's go loop through the lists and print out each item.",
      "code": "print 'Fruits:'\nfor (fruit in my_list) do\n  print fruit\nend\n\nprint 'Lucky numbers:'\nfor (number in some_lucky_numbers) do \n  print number\nend",
      "prompt": "Fruits:\napples\noranges\nbananas\nLucky numbers:\n6\n4\n9"
    },
    {
      "preface": "Let's run some comparisons.",
      "code": "print 5 > 4\nprint 12 == 12\nprint 'Apples' == 'Oranges'\nprint 'Green' == 'Green'\nprint 3 <= 2",
      "prompt": "true\ntrue\nfalse\ntrue\nfalse"
    },
    {
      "preface": "Once you can compare, you can respond differently according to information coming in.",
      "code": "name = 'Leslie'\nif name == 'Leslie'\n  print 'Hello Leslie'\nelse\n  print 'Hi there'\nend",
      "prompt": "Hello Leslie"
    },
    {
      "preface": "Much of coding relates to organization. One of the main ways we organize and re-use code is through 'functions'. Let's define one.",
      "code": "def greeting\n  'Hello'\nend\nprint greeting",
      "prompt": "Hello"
    },
    {
      "preface": "Going further, we can define a function with parameters, making them highly re-usable.",
      "code": "def greet(name)\n  'Hello ' + name\nend\n\nprint greet('Pat')\nprint greet('Jordan')",
      "prompt": "Hello Pat\nHello Jordan"
    }
  ],
  "conclusion": "That is pretty much it. Everything builds on top of those ideas.\nVariables, Loops, Conditions, Functions"
}
